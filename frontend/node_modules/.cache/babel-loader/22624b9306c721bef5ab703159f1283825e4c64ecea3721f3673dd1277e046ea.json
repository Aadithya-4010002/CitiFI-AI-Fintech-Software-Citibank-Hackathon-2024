{"ast":null,"code":"var _jsxFileName = \"/Users/aadithyaram/Desktop/citibank_plaid/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box, Button, TextField, Typography, Paper, Container } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [prompt, setPrompt] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const [currentResponse, setCurrentResponse] = useState('');\n  const [typingIndex, setTypingIndex] = useState(0);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Load conversation from localStorage when the component mounts\n  useEffect(() => {\n    const savedConversation = localStorage.getItem('chatConversation');\n    if (savedConversation) {\n      setConversation(JSON.parse(savedConversation));\n    }\n  }, []);\n\n  // Save conversation to localStorage whenever it updates\n  useEffect(() => {\n    if (conversation.length > 0) {\n      const conversationToSave = conversation.slice(-5); // Keep only the last 5 messages\n      localStorage.setItem('chatConversation', JSON.stringify(conversationToSave));\n    }\n  }, [conversation]);\n  const handleGenerate = async () => {\n    if (prompt.trim()) {\n      try {\n        // Send the POST request to the backend API\n        const result = await axios.post('http://localhost:8000/chat', {\n          prompt\n        });\n\n        // Update the conversation state with the user's message\n        setConversation(prev => [...prev, {\n          sender: 'user',\n          text: prompt\n        }]);\n\n        // Prepare for typing animation for the bot response\n        setCurrentResponse(result.data.response);\n        setIsTyping(true);\n        setTypingIndex(0);\n\n        // Clear the prompt field\n        setPrompt('');\n      } catch (error) {\n        console.error('Error generating response:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (isTyping && typingIndex < currentResponse.length) {\n      const timeout = setTimeout(() => {\n        setConversation(prev => {\n          const lastMessage = prev[prev.length - 1];\n          if (lastMessage && lastMessage.sender === 'bot') {\n            return [...prev.slice(0, -1), {\n              sender: 'bot',\n              text: lastMessage.text + currentResponse[typingIndex]\n            }];\n          } else {\n            return [...prev, {\n              sender: 'bot',\n              text: currentResponse[typingIndex]\n            }];\n          }\n        });\n        setTypingIndex(prev => prev + 1);\n      }, 9);\n      return () => clearTimeout(timeout);\n    } else if (typingIndex === currentResponse.length) {\n      setIsTyping(false);\n    }\n  }, [typingIndex, isTyping, currentResponse]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [conversation]);\n\n  // Function to clear the chat history\n  const handleClearChat = () => {\n    setConversation([]);\n    localStorage.removeItem('chatConversation');\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      style: {\n        textAlign: 'center',\n        margin: '20px 0'\n      },\n      children: \"Relationship Manager Assisstant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      style: {\n        padding: '100px',\n        maxHeight: '500px',\n        overflowY: 'auto',\n        marginBottom: '20px'\n      },\n      children: [conversation.map((message, index) => /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start',\n        mb: 2,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          style: {\n            padding: '10px',\n            backgroundColor: message.sender === 'user' ? '#1565c0a4' : '#f1f8e9',\n            maxWidth: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      mb: 2,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"outlined\",\n        color: \"primary\",\n        fullWidth: true,\n        placeholder: \"Type your Message\",\n        value: prompt,\n        onChange: e => setPrompt(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            handleGenerate();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleGenerate,\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Talk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"secondary\",\n        onClick: handleClearChat,\n        children: \"Clear Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatBot, \"jwsFPsKp4YRhvfsh3aDz7FAe32U=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","Box","Button","TextField","Typography","Paper","Container","jsxDEV","_jsxDEV","ChatBot","_s","prompt","setPrompt","conversation","setConversation","currentResponse","setCurrentResponse","typingIndex","setTypingIndex","isTyping","setIsTyping","messagesEndRef","savedConversation","localStorage","getItem","JSON","parse","length","conversationToSave","slice","setItem","stringify","handleGenerate","trim","result","post","prev","sender","text","data","response","error","console","timeout","setTimeout","lastMessage","clearTimeout","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleClearChat","removeItem","maxWidth","children","variant","gutterBottom","style","textAlign","margin","fileName","_jsxFileName","lineNumber","columnNumber","elevation","padding","maxHeight","overflowY","marginBottom","map","message","index","display","justifyContent","mb","backgroundColor","ref","alignItems","color","fullWidth","placeholder","value","onChange","e","target","onKeyPress","key","preventDefault","onClick","marginLeft","_c","$RefreshReg$"],"sources":["/Users/aadithyaram/Desktop/citibank_plaid/src/components/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box, Button, TextField, Typography, Paper, Container } from '@mui/material';\n\nconst ChatBot = () => {\n    const [prompt, setPrompt] = useState('');\n    const [conversation, setConversation] = useState([]);\n    const [currentResponse, setCurrentResponse] = useState('');\n    const [typingIndex, setTypingIndex] = useState(0);\n    const [isTyping, setIsTyping] = useState(false);\n    const messagesEndRef = useRef(null);\n\n    // Load conversation from localStorage when the component mounts\n    useEffect(() => {\n        const savedConversation = localStorage.getItem('chatConversation');\n        if (savedConversation) {\n            setConversation(JSON.parse(savedConversation));\n        }\n    }, []);\n\n    // Save conversation to localStorage whenever it updates\n    useEffect(() => {\n        if (conversation.length > 0) {\n            const conversationToSave = conversation.slice(-5); // Keep only the last 5 messages\n            localStorage.setItem('chatConversation', JSON.stringify(conversationToSave));\n        }\n    }, [conversation]);\n\n    const handleGenerate = async () => {\n        if (prompt.trim()) {\n            try {\n                // Send the POST request to the backend API\n                const result = await axios.post('http://localhost:8000/chat', { prompt });\n\n                // Update the conversation state with the user's message\n                setConversation((prev) => [\n                    ...prev,\n                    { sender: 'user', text: prompt },\n                ]);\n\n                // Prepare for typing animation for the bot response\n                setCurrentResponse(result.data.response);\n                setIsTyping(true);\n                setTypingIndex(0);\n\n                // Clear the prompt field\n                setPrompt('');\n            } catch (error) {\n                console.error('Error generating response:', error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (isTyping && typingIndex < currentResponse.length) {\n            const timeout = setTimeout(() => {\n                setConversation((prev) => {\n                    const lastMessage = prev[prev.length - 1];\n                    if (lastMessage && lastMessage.sender === 'bot') {\n                        return [\n                            ...prev.slice(0, -1),\n                            { sender: 'bot', text: lastMessage.text + currentResponse[typingIndex] }\n                        ];\n                    } else {\n                        return [\n                            ...prev,\n                            { sender: 'bot', text: currentResponse[typingIndex] }\n                        ];\n                    }\n                });\n                setTypingIndex((prev) => prev + 1);\n            }, 9);\n\n            return () => clearTimeout(timeout);\n        } else if (typingIndex === currentResponse.length) {\n            setIsTyping(false);\n        }\n    }, [typingIndex, isTyping, currentResponse]);\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [conversation]);\n\n    // Function to clear the chat history\n    const handleClearChat = () => {\n        setConversation([]);\n        localStorage.removeItem('chatConversation');\n    };\n\n    return (\n        <Container maxWidth=\"sm\">\n            <Typography variant=\"h5\" gutterBottom style={{ textAlign: 'center', margin: '20px 0' }}>\n                Relationship Manager Assisstant\n            </Typography>\n            <Paper elevation={3} style={{ padding: '100px', maxHeight: '500px', overflowY: 'auto', marginBottom: '20px' }}>\n                {conversation.map((message, index) => (\n                    <Box\n                        key={index}\n                        display=\"flex\"\n                        justifyContent={message.sender === 'user' ? 'flex-end' : 'flex-start'}\n                        mb={2}\n                    >\n                        <Paper\n                            style={{\n                                padding: '10px',\n                                backgroundColor: message.sender === 'user' ? '#1565c0a4' : '#f1f8e9',\n                                maxWidth: '100%',\n                            }}\n                        >\n                            <Typography variant=\"body2\">\n                                {message.text}\n                            </Typography>\n                        </Paper>\n                    </Box>\n                ))}\n                <div ref={messagesEndRef} />\n            </Paper>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <TextField\n                    variant=\"outlined\"\n                    color='primary'\n                    fullWidth\n                    placeholder=\"Type your Message\"\n                    value={prompt}\n                    onChange={(e) => setPrompt(e.target.value)}\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            e.preventDefault();\n                            handleGenerate();\n                        }\n                    }}\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleGenerate}\n                    style={{ marginLeft: '10px' }}\n                >\n                    Talk\n                </Button>\n            </Box>\n            <Box textAlign=\"center\">\n                <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={handleClearChat}\n                >\n                    Clear Chat\n                </Button>\n            </Box>\n        </Container>\n    );\n};\n\nexport default ChatBot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}