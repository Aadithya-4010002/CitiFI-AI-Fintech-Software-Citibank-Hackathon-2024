{"ast":null,"code":"// src/services/auth.js\nimport { Client, Account } from \"appwrite\";\n\n// Initialize the Appwrite client\nconst client = new Client();\nclient.setEndpoint('https://cloud.appwrite.io/v1') // Replace with your Appwrite endpoint\n.setProject('6702274900285e6a0b4c'); // Replace with your project ID\n\nconst account = new Account(client);\n\n// Function to create a new user (sign up)\nexport const signupUser = async (email, password, name) => {\n  try {\n    const response = await account.create('unique()',\n    // Generates a unique ID for the user automatically\n    email, password, name);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to log in an existing user\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await account.createEmailPasswordSession(email, password);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Optional: Function to log out the user\nexport const logoutUser = async () => {\n  try {\n    await account.deleteSession('current'); // Ends the current session\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["Client","Account","client","setEndpoint","setProject","account","signupUser","email","password","name","response","create","error","loginUser","createEmailPasswordSession","logoutUser","deleteSession"],"sources":["/Users/aadithyaram/Desktop/citibank_plaid/src/services/auth.js"],"sourcesContent":["// src/services/auth.js\nimport { Client, Account } from \"appwrite\";\n\n// Initialize the Appwrite client\nconst client = new Client();\n\nclient\n  .setEndpoint('https://cloud.appwrite.io/v1') // Replace with your Appwrite endpoint\n  .setProject('6702274900285e6a0b4c'); // Replace with your project ID\n\nconst account = new Account(client);\n\n// Function to create a new user (sign up)\nexport const signupUser = async (email, password, name) => {\n  try {\n    const response = await account.create(\n      'unique()', \n      // Generates a unique ID for the user automatically\n      email,\n      password,\n      name\n    );\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to log in an existing user\nexport const loginUser = async ( email, password) => {\n  try {\n    const response = await account.createEmailPasswordSession(email, password);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Optional: Function to log out the user\nexport const logoutUser = async () => {\n  try {\n    await account.deleteSession('current'); // Ends the current session\n  } catch (error) {\n    throw error;\n  }\n};\n"],"mappings":"AAAA;AACA,SAASA,MAAM,EAAEC,OAAO,QAAQ,UAAU;;AAE1C;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAAC,CAAC;AAE3BE,MAAM,CACHC,WAAW,CAAC,8BAA8B,CAAC,CAAC;AAAA,CAC5CC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;;AAEvC,MAAMC,OAAO,GAAG,IAAIJ,OAAO,CAACC,MAAM,CAAC;;AAEnC;AACA,OAAO,MAAMI,UAAU,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;EACzD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,OAAO,CAACM,MAAM,CACnC,UAAU;IACV;IACAJ,KAAK,EACLC,QAAQ,EACRC,IACF,CAAC;IACD,OAAOC,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAQN,KAAK,EAAEC,QAAQ,KAAK;EACnD,IAAI;IACF,MAAME,QAAQ,GAAG,MAAML,OAAO,CAACS,0BAA0B,CAACP,KAAK,EAAEC,QAAQ,CAAC;IAC1E,OAAOE,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMV,OAAO,CAACW,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;EAC1C,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}