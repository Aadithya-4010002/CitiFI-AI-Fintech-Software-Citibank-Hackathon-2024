{"ast":null,"code":"var _jsxFileName = \"/Users/aadithyaram/Desktop/citibank_plaid/src/components/PopupChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box, Button, TextField, Typography, Avatar, Paper } from '@mui/material';\nimport ChatIcon from '@mui/icons-material/Chat';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PopupChatBot = () => {\n  _s();\n  const [prompt, setPrompt] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const [currentResponse, setCurrentResponse] = useState('');\n  const [typingIndex, setTypingIndex] = useState(0);\n  const [isTyping, setIsTyping] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Load conversation from localStorage when the component mounts\n  useEffect(() => {\n    const savedConversation = localStorage.getItem('chatConversation');\n    if (savedConversation) {\n      setConversation(JSON.parse(savedConversation));\n    }\n  }, []);\n\n  // Save conversation to localStorage whenever it updates\n  useEffect(() => {\n    if (conversation.length > 0) {\n      const conversationToSave = conversation.slice(-5); // Keep only the last 5 messages\n      localStorage.setItem('chatConversation', JSON.stringify(conversationToSave));\n    }\n  }, [conversation]);\n  const handleGenerate = async () => {\n    if (prompt.trim()) {\n      try {\n        // Send the POST request to the backend API\n        const result = await axios.post('http://localhost:8000/chat', {\n          prompt\n        });\n\n        // Update the conversation state with the user's message\n        setConversation(prev => [...prev, {\n          sender: 'user',\n          text: prompt\n        }]);\n\n        // Prepare for typing animation for the bot response\n        setCurrentResponse(result.data.response);\n        setIsTyping(true);\n        setTypingIndex(0);\n\n        // Clear the prompt field\n        setPrompt('');\n      } catch (error) {\n        console.error('Error generating response:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (isTyping && typingIndex < currentResponse.length) {\n      const timeout = setTimeout(() => {\n        setConversation(prev => {\n          const lastMessage = prev[prev.length - 1];\n          if (lastMessage && lastMessage.sender === 'bot') {\n            return [...prev.slice(0, -1), {\n              sender: 'bot',\n              text: lastMessage.text + currentResponse[typingIndex]\n            }];\n          } else {\n            return [...prev, {\n              sender: 'bot',\n              text: currentResponse[typingIndex]\n            }];\n          }\n        });\n        setTypingIndex(prev => prev + 1);\n      }, 9);\n      return () => clearTimeout(timeout);\n    } else if (typingIndex === currentResponse.length) {\n      setIsTyping(false);\n    }\n  }, [typingIndex, isTyping, currentResponse]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [conversation]);\n\n  // Function to clear the chat history\n  const handleClearChat = () => {\n    setConversation([]);\n    localStorage.removeItem('chatConversation');\n  };\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      position: \"fixed\",\n      bottom: \"720px\",\n      right: \"60px\",\n      zIndex: 9999,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: toggleChat,\n        children: /*#__PURE__*/_jsxDEV(ChatIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        style: {\n          width: '500px',\n          height: '400px',\n          position: 'fixed',\n          bottom: '80px',\n          right: '20px',\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          style: {\n            flex: 1,\n            overflowY: 'auto',\n            padding: '10px'\n          },\n          children: [conversation.map((message, index) => /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start',\n            alignItems: \"center\",\n            mb: 2,\n            children: [message.sender === 'bot' && /*#__PURE__*/_jsxDEV(Avatar, {\n              alt: \"Bot\",\n              src: \"/path-to-bot-image.jpg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Paper, {\n              style: {\n                padding: '10px',\n                backgroundColor: message.sender === 'user' ? '#1565c0a4' : '#f1f8e9',\n                maxWidth: '75%',\n                marginLeft: message.sender === 'user' ? '10px' : '0',\n                marginRight: message.sender === 'bot' ? '10px' : '0'\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 37\n            }, this), message.sender === 'user' && /*#__PURE__*/_jsxDEV(Avatar, {\n              alt: \"User\",\n              src: \"/path-to-user-image.jpg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          alignItems: \"center\",\n          p: 1,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            fullWidth: true,\n            placeholder: \"Type your message\",\n            value: prompt,\n            onChange: e => setPrompt(e.target.value),\n            onKeyPress: e => {\n              if (e.key === 'Enter') {\n                e.preventDefault();\n                handleGenerate();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"text\",\n            color: \"secondary\",\n            onClick: handleGenerate,\n            style: {\n              marginLeft: '10px'\n            },\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          textAlign: \"center\",\n          p: 1,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"text\",\n            color: \"secondary\",\n            onClick: handleClearChat,\n            children: \"Clear Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(PopupChatBot, \"xUyxJbtByk3DN3p35ln9e70M1gg=\");\n_c = PopupChatBot;\nexport default PopupChatBot;\nvar _c;\n$RefreshReg$(_c, \"PopupChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","Box","Button","TextField","Typography","Avatar","Paper","ChatIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","PopupChatBot","_s","prompt","setPrompt","conversation","setConversation","currentResponse","setCurrentResponse","typingIndex","setTypingIndex","isTyping","setIsTyping","isOpen","setIsOpen","messagesEndRef","savedConversation","localStorage","getItem","JSON","parse","length","conversationToSave","slice","setItem","stringify","handleGenerate","trim","result","post","prev","sender","text","data","response","error","console","timeout","setTimeout","lastMessage","clearTimeout","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleClearChat","removeItem","toggleChat","children","position","bottom","right","zIndex","variant","color","onClick","fileName","_jsxFileName","lineNumber","columnNumber","elevation","style","width","height","overflow","display","flexDirection","flex","overflowY","padding","map","message","index","justifyContent","alignItems","mb","alt","src","backgroundColor","maxWidth","marginLeft","marginRight","ref","p","fullWidth","placeholder","value","onChange","e","target","onKeyPress","key","preventDefault","textAlign","_c","$RefreshReg$"],"sources":["/Users/aadithyaram/Desktop/citibank_plaid/src/components/PopupChatBot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box, Button, TextField, Typography, Avatar, Paper } from '@mui/material';\nimport ChatIcon from '@mui/icons-material/Chat';\n\nconst PopupChatBot = () => {\n    const [prompt, setPrompt] = useState('');\n    const [conversation, setConversation] = useState([]);\n    const [currentResponse, setCurrentResponse] = useState('');\n    const [typingIndex, setTypingIndex] = useState(0);\n    const [isTyping, setIsTyping] = useState(false);\n    const [isOpen, setIsOpen] = useState(false);\n    const messagesEndRef = useRef(null);\n\n    // Load conversation from localStorage when the component mounts\n    useEffect(() => {\n        const savedConversation = localStorage.getItem('chatConversation');\n        if (savedConversation) {\n            setConversation(JSON.parse(savedConversation));\n        }\n    }, []);\n\n    // Save conversation to localStorage whenever it updates\n    useEffect(() => {\n        if (conversation.length > 0) {\n            const conversationToSave = conversation.slice(-5); // Keep only the last 5 messages\n            localStorage.setItem('chatConversation', JSON.stringify(conversationToSave));\n        }\n    }, [conversation]);\n\n    const handleGenerate = async () => {\n        if (prompt.trim()) {\n            try {\n                // Send the POST request to the backend API\n                const result = await axios.post('http://localhost:8000/chat', { prompt });\n\n                // Update the conversation state with the user's message\n                setConversation((prev) => [\n                    ...prev,\n                    { sender: 'user', text: prompt },\n                ]);\n\n                // Prepare for typing animation for the bot response\n                setCurrentResponse(result.data.response);\n                setIsTyping(true);\n                setTypingIndex(0);\n\n                // Clear the prompt field\n                setPrompt('');\n            } catch (error) {\n                console.error('Error generating response:', error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (isTyping && typingIndex < currentResponse.length) {\n            const timeout = setTimeout(() => {\n                setConversation((prev) => {\n                    const lastMessage = prev[prev.length - 1];\n                    if (lastMessage && lastMessage.sender === 'bot') {\n                        return [\n                            ...prev.slice(0, -1),\n                            { sender: 'bot', text: lastMessage.text + currentResponse[typingIndex] }\n                        ];\n                    } else {\n                        return [\n                            ...prev,\n                            { sender: 'bot', text: currentResponse[typingIndex] }\n                        ];\n                    }\n                });\n                setTypingIndex((prev) => prev + 1);\n            }, 9);\n\n            return () => clearTimeout(timeout);\n        } else if (typingIndex === currentResponse.length) {\n            setIsTyping(false);\n        }\n    }, [typingIndex, isTyping, currentResponse]);\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [conversation]);\n\n    // Function to clear the chat history\n    const handleClearChat = () => {\n        setConversation([]);\n        localStorage.removeItem('chatConversation');\n    };\n\n    const toggleChat = () => {\n        setIsOpen(!isOpen);\n    };\n\n    return (\n        <>\n            <Box\n                position=\"fixed\"\n                bottom=\"720px\"\n                right=\"60px\"\n                zIndex={9999}\n            >\n                <Button variant=\"contained\" color=\"primary\" onClick={toggleChat}>\n                    <ChatIcon />\n                </Button>\n\n                {isOpen && (\n                    <Paper elevation={3} style={{ width: '500px', height: '400px', position: 'fixed', bottom: '80px', right: '20px', overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>\n                        <Box style={{ flex: 1, overflowY: 'auto', padding: '10px' }}>\n                            {conversation.map((message, index) => (\n                                <Box\n                                    key={index}\n                                    display=\"flex\"\n                                    justifyContent={message.sender === 'user' ? 'flex-end' : 'flex-start'}\n                                    alignItems=\"center\"\n                                    mb={2}\n                                >\n                                    {message.sender === 'bot' && (\n                                        <Avatar alt=\"Bot\" src=\"/path-to-bot-image.jpg\" />\n                                    )}\n                                    <Paper\n                                        style={{\n                                            padding: '10px',\n                                            backgroundColor: message.sender === 'user' ? '#1565c0a4' : '#f1f8e9',\n                                            maxWidth: '75%',\n                                            marginLeft: message.sender === 'user' ? '10px' : '0',\n                                            marginRight: message.sender === 'bot' ? '10px' : '0',\n                                        }}\n                                    >\n                                        <Typography variant=\"body2\">\n                                            {message.text}\n                                        </Typography>\n                                    </Paper>\n                                    {message.sender === 'user' && (\n                                        <Avatar alt=\"User\" src=\"/path-to-user-image.jpg\" />\n                                    )}\n                                </Box>\n                            ))}\n                            <div ref={messagesEndRef} />\n                        </Box>\n                        <Box display=\"flex\" alignItems=\"center\" p={1}>\n                            <TextField\n                                variant=\"outlined\"\n                                fullWidth\n                                placeholder=\"Type your message\"\n                                value={prompt}\n                                onChange={(e) => setPrompt(e.target.value)}\n                                onKeyPress={(e) => {\n                                    if (e.key === 'Enter') {\n                                        e.preventDefault();\n                                        handleGenerate();\n                                    }\n                                }}\n                            />\n                            <Button\n                                variant=\"text\"\n                                color=\"secondary\"\n                                onClick={handleGenerate}\n                                style={{ marginLeft: '10px' }}\n                            >\n                                Send\n                            </Button>\n                        </Box>\n                        <Box textAlign=\"center\" p={1}>\n                            <Button\n                                variant=\"text\"\n                                color=\"secondary\"\n                                onClick={handleClearChat}\n                            >\n                                Clear Chat\n                            </Button>\n                        </Box>\n                    </Paper>\n                )}\n            </Box>\n        </>\n    );\n};\n\nexport default PopupChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}