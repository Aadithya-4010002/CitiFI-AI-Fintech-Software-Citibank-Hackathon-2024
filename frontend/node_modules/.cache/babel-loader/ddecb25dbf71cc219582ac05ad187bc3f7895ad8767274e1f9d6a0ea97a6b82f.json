{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) : typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) : (global = global || self, factory(global.PlaidLink = {}, global.React));\n})(this, function (exports, React) {\n  'use strict';\n\n  var React__default = 'default' in React ? React['default'] : React;\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      enumerableOnly && (symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n  }\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = null != arguments[i] ? arguments[i] : {};\n      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n    return target;\n  }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n    return target;\n  }\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n    return target;\n  }\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n  function _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n  function unwrapExports(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n  }\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n  var useScript_1 = createCommonjsModule(function (module, exports) {\n    var __rest = commonjsGlobal && commonjsGlobal.__rest || function (s, e) {\n      var t = {};\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n      if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n      }\n      return t;\n    };\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.scripts = void 0;\n\n    // Previously loading/loaded scripts and their current status\n\n    exports.scripts = {}; // Check for existing <script> tags with this src. If so, update scripts[src]\n    // and return the new status; otherwise, return undefined.\n\n    var checkExisting = function (src) {\n      var existing = document.querySelector(\"script[src=\\\"\" + src + \"\\\"]\");\n      if (existing) {\n        // Assume existing <script> tag is already loaded,\n        // and cache that data for future use.\n        return exports.scripts[src] = {\n          loading: false,\n          error: null,\n          scriptEl: existing\n        };\n      }\n      return undefined;\n    };\n    function useScript(_a) {\n      var src = _a.src,\n        _b = _a.checkForExisting,\n        checkForExisting = _b === void 0 ? false : _b,\n        attributes = __rest(_a, [\"src\", \"checkForExisting\"]); // Check whether some instance of this hook considered this src.\n\n      var status = src ? exports.scripts[src] : undefined; // If requested, check for existing <script> tags with this src\n      // (unless we've already loaded the script ourselves).\n\n      if (!status && checkForExisting && src && isBrowser) {\n        status = checkExisting(src);\n      }\n      var _c = (0, React__default.useState)(status ? status.loading : Boolean(src)),\n        loading = _c[0],\n        setLoading = _c[1];\n      var _d = (0, React__default.useState)(status ? status.error : null),\n        error = _d[0],\n        setError = _d[1];\n      (0, React__default.useEffect)(function () {\n        // Nothing to do on server, or if no src specified, or\n        // if loading has already resolved to \"loaded\" or \"error\" state.\n        if (!isBrowser || !src || !loading || error) return; // Check again for existing <script> tags with this src\n        // in case it's changed since mount.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n\n        status = exports.scripts[src];\n        if (!status && checkForExisting) {\n          status = checkExisting(src);\n        } // Determine or create <script> element to listen to.\n\n        var scriptEl;\n        if (status) {\n          scriptEl = status.scriptEl;\n        } else {\n          scriptEl = document.createElement('script');\n          scriptEl.src = src;\n          Object.keys(attributes).forEach(function (key) {\n            if (scriptEl[key] === undefined) {\n              scriptEl.setAttribute(key, attributes[key]);\n            } else {\n              scriptEl[key] = attributes[key];\n            }\n          });\n          status = exports.scripts[src] = {\n            loading: true,\n            error: null,\n            scriptEl: scriptEl\n          };\n        } // `status` is now guaranteed to be defined: either the old status\n        // from a previous load, or a newly created one.\n\n        var handleLoad = function () {\n          if (status) status.loading = false;\n          setLoading(false);\n        };\n        var handleError = function (error) {\n          if (status) status.error = error;\n          setError(error);\n        };\n        scriptEl.addEventListener('load', handleLoad);\n        scriptEl.addEventListener('error', handleError);\n        document.body.appendChild(scriptEl);\n        return function () {\n          scriptEl.removeEventListener('load', handleLoad);\n          scriptEl.removeEventListener('error', handleError); // if we unmount, and we are still loading the script, then\n          // remove from the DOM & cache so we have a clean slate next time.\n          // this is similar to the `removeOnUnmount` behavior of the TS useScript hook\n          // https://github.com/juliencrn/usehooks-ts/blob/20667273744a22dd2cd2c48c38cd3c10f254ae47/packages/usehooks-ts/src/useScript/useScript.ts#L134\n          // but only applied when loading\n\n          if (status && status.loading) {\n            scriptEl.remove();\n            delete exports.scripts[src];\n          }\n        }; // we need to ignore the attributes as they're a new object per call, so we'd never skip an effect call\n      }, [src]);\n      return [loading, error];\n    }\n    exports.default = useScript;\n    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  });\n  unwrapExports(useScript_1);\n  var useScript_2 = useScript_1.scripts;\n  var lib = createCommonjsModule(function (module, exports) {\n    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {\n      return mod && mod.__esModule ? mod : {\n        \"default\": mod\n      };\n    };\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.scripts = exports.default = void 0;\n    Object.defineProperty(exports, \"default\", {\n      enumerable: true,\n      get: function () {\n        return __importDefault(useScript_1).default;\n      }\n    });\n    Object.defineProperty(exports, \"scripts\", {\n      enumerable: true,\n      get: function () {\n        return useScript_1.scripts;\n      }\n    });\n  });\n  var useScript = unwrapExports(lib);\n  var lib_1 = lib.scripts;\n  var renameKeyInObject = function renameKeyInObject(o, oldKey, newKey) {\n    var newObject = {};\n    delete Object.assign(newObject, o, _defineProperty({}, newKey, o[oldKey]))[oldKey];\n    return newObject;\n  };\n  /**\n   * Wrap link handler creation and instance to clean up iframe via destroy() method\n   */\n\n  var createPlaidHandler = function createPlaidHandler(config, creator) {\n    var state = {\n      plaid: null,\n      open: false,\n      onExitCallback: null\n    }; // If Plaid is not available, throw an Error\n\n    if (typeof window === 'undefined' || !window.Plaid) {\n      throw new Error('Plaid not loaded');\n    }\n    state.plaid = creator(_objectSpread2(_objectSpread2({}, config), {}, {\n      onExit: function onExit(error, metadata) {\n        state.open = false;\n        config.onExit && config.onExit(error, metadata);\n        state.onExitCallback && state.onExitCallback();\n      }\n    }));\n    var open = function open() {\n      if (!state.plaid) {\n        return;\n      }\n      state.open = true;\n      state.onExitCallback = null;\n      state.plaid.open();\n    };\n    var submit = function submit(data) {\n      if (!state.plaid) {\n        return;\n      }\n      state.plaid.submit(data);\n    };\n    var exit = function exit(exitOptions, callback) {\n      if (!state.open || !state.plaid) {\n        callback && callback();\n        return;\n      }\n      state.onExitCallback = callback;\n      state.plaid.exit(exitOptions);\n      if (exitOptions && exitOptions.force) {\n        state.open = false;\n      }\n    };\n    var destroy = function destroy() {\n      if (!state.plaid) {\n        return;\n      }\n      state.plaid.destroy();\n      state.plaid = null;\n    };\n    return {\n      open: open,\n      submit: submit,\n      exit: exit,\n      destroy: destroy\n    };\n  };\n  var createPlaid = function createPlaid(options, creator) {\n    var config = renameKeyInObject(options, 'publicKey', 'key');\n    return createPlaidHandler(config, creator);\n  };\n  var PLAID_LINK_STABLE_URL = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';\n  var noop = function noop() {};\n  /**\n   * This hook loads Plaid script and manages the Plaid Link creation for you.\n   * You get easy open & exit methods to call and loading & error states.\n   *\n   * This will destroy the Plaid UI on un-mounting so it's up to you to be\n   * graceful to the user.\n   *\n   * A new Plaid instance is created every time the token and products options change.\n   * It's up to you to prevent unnecessary re-creations on re-render.\n   */\n\n  var usePlaidLink = function usePlaidLink(options) {\n    // Asynchronously load the plaid/link/stable url into the DOM\n    var _useScript = useScript({\n        src: PLAID_LINK_STABLE_URL,\n        checkForExisting: true\n      }),\n      _useScript2 = _slicedToArray(_useScript, 2),\n      loading = _useScript2[0],\n      error = _useScript2[1]; // internal state\n\n    var _useState = React.useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      plaid = _useState2[0],\n      setPlaid = _useState2[1];\n    var _useState3 = React.useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      iframeLoaded = _useState4[0],\n      setIframeLoaded = _useState4[1];\n    var products = (options.product || []).slice().sort().join(',');\n    React.useEffect(function () {\n      // If the link.js script is still loading, return prematurely\n      if (loading) {\n        return;\n      } // If the token, publicKey, and received redirect URI are undefined, return prematurely\n\n      if (!options.token && !options.publicKey && !options.receivedRedirectUri) {\n        return;\n      }\n      if (error || !window.Plaid) {\n        // eslint-disable-next-line no-console\n        console.error('Error loading Plaid', error);\n        return;\n      } // if an old plaid instance exists, destroy it before\n      // creating a new one\n\n      if (plaid != null) {\n        plaid.exit({\n          force: true\n        }, function () {\n          return plaid.destroy();\n        });\n      }\n      var next = createPlaid(_objectSpread2(_objectSpread2({}, options), {}, {\n        onLoad: function onLoad() {\n          setIframeLoaded(true);\n          options.onLoad && options.onLoad();\n        }\n      }), window.Plaid.create);\n      setPlaid(next); // destroy the Plaid iframe factory\n\n      return function () {\n        return next.exit({\n          force: true\n        }, function () {\n          return next.destroy();\n        });\n      };\n    }, [loading, error, options.publicKey, options.token, products]);\n    var ready = plaid != null && (!loading || iframeLoaded);\n    var openNoOp = function openNoOp() {\n      if (!options.token) {\n        console.warn('react-plaid-link: You cannot call open() without a valid token supplied to usePlaidLink. This is a no-op.');\n      }\n    };\n    return {\n      error: error,\n      ready: ready,\n      submit: plaid ? plaid.submit : noop,\n      exit: plaid ? plaid.exit : noop,\n      open: plaid ? plaid.open : openNoOp\n    };\n  };\n  var _excluded = [\"children\", \"style\", \"className\"];\n  var PlaidLink = function PlaidLink(props) {\n    var children = props.children,\n      style = props.style,\n      className = props.className,\n      config = _objectWithoutProperties(props, _excluded);\n    var _usePlaidLink = usePlaidLink(_objectSpread2({}, config)),\n      error = _usePlaidLink.error,\n      open = _usePlaidLink.open;\n    return /*#__PURE__*/React__default.createElement(\"button\", {\n      disabled: Boolean(error),\n      type: \"button\",\n      className: className,\n      style: _objectSpread2({\n        padding: '6px 4px',\n        outline: 'none',\n        background: '#FFFFFF',\n        border: '2px solid #F1F1F1',\n        borderRadius: '4px'\n      }, style),\n      onClick: function onClick() {\n        return open();\n      }\n    }, children);\n  };\n  PlaidLink.displayName = 'PlaidLink';\n  var PlaidEmbeddedLink = function PlaidEmbeddedLink(props) {\n    var style = props.style,\n      className = props.className,\n      onSuccess = props.onSuccess,\n      onExit = props.onExit,\n      onLoad = props.onLoad,\n      onEvent = props.onEvent,\n      token = props.token,\n      receivedRedirectUri = props.receivedRedirectUri;\n    var config = React.useMemo(function () {\n      return {\n        onSuccess: onSuccess,\n        onExit: onExit,\n        onLoad: onLoad,\n        onEvent: onEvent,\n        token: token,\n        receivedRedirectUri: receivedRedirectUri\n      };\n    }, [onSuccess, onExit, onLoad, onEvent, token, receivedRedirectUri]); // Asynchronously load the plaid/link/stable url into the DOM\n\n    var _useScript = useScript({\n        src: PLAID_LINK_STABLE_URL,\n        checkForExisting: true\n      }),\n      _useScript2 = _slicedToArray(_useScript, 2),\n      loading = _useScript2[0],\n      error = _useScript2[1];\n    var embeddedLinkTarget = React.useRef(null);\n    React.useEffect(function () {\n      // If the external link JS script is still loading, return prematurely\n      if (loading) {\n        return;\n      }\n      if (error || !window.Plaid) {\n        // eslint-disable-next-line no-console\n        console.error('Error loading Plaid', error);\n        return;\n      }\n      if (config.token == null || config.token == '') {\n        console.error('A token is required to initialize embedded Plaid Link');\n        return;\n      } // The embedded Link interface doesn't use the `usePlaidLink` hook to manage\n      // its Plaid Link instance because the embedded Link integration in link-initialize\n      // maintains its own handler internally.\n\n      var _window$Plaid$createE = window.Plaid.createEmbedded(_objectSpread2({}, config), embeddedLinkTarget.current),\n        destroy = _window$Plaid$createE.destroy; // Clean up embedded Link component on unmount\n\n      return function () {\n        destroy();\n      };\n    }, [loading, error, config, embeddedLinkTarget]);\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      style: style,\n      className: className,\n      ref: embeddedLinkTarget\n    });\n  };\n\n  // The following event names are stable and will not be deprecated or changed\n\n  (function (PlaidLinkStableEvent) {\n    PlaidLinkStableEvent[\"OPEN\"] = \"OPEN\";\n    PlaidLinkStableEvent[\"EXIT\"] = \"EXIT\";\n    PlaidLinkStableEvent[\"HANDOFF\"] = \"HANDOFF\";\n    PlaidLinkStableEvent[\"SELECT_INSTITUTION\"] = \"SELECT_INSTITUTION\";\n    PlaidLinkStableEvent[\"ERROR\"] = \"ERROR\";\n    PlaidLinkStableEvent[\"BANK_INCOME_INSIGHTS_COMPLETED\"] = \"BANK_INCOME_INSIGHTS_COMPLETED\";\n    PlaidLinkStableEvent[\"IDENTITY_VERIFICATION_PASS_SESSION\"] = \"IDENTITY_VERIFICATION_PASS_SESSION\";\n    PlaidLinkStableEvent[\"IDENTITY_VERIFICATION_FAIL_SESSION\"] = \"IDENTITY_VERIFICATION_FAIL_SESSION\";\n  })(exports.PlaidLinkStableEvent || (exports.PlaidLinkStableEvent = {}));\n  exports.PlaidEmbeddedLink = PlaidEmbeddedLink;\n  exports.PlaidLink = PlaidLink;\n  exports.usePlaidLink = usePlaidLink;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}